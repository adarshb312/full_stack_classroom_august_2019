{"version":3,"sources":["serviceWorker.js","Weather.js","RouterComponent.js","index.js"],"names":["Boolean","window","location","hostname","match","Weather","onPlaceChange","event","setState","target","value","handleClick","axios","post","state","place","then","response","console","log","data","temperature","this","onChange","type","onClick","React","Component","RouterComponent","to","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4ECoBSC,E,YAnCX,aAAc,IAAD,8BACT,+CAOJC,cAAgB,SAACC,GACb,EAAKC,SAAS,CACV,MAAUD,EAAME,OAAOC,SAVlB,EAcbC,YAAc,WAEVC,IAAMC,KADI,oCACM,CAAC,MAAU,EAAKC,MAAMC,QACrCC,MAAK,SAACC,GACHC,QAAQC,IAAIF,EAASG,KAAKC,aAC1B,EAAKb,SAAS,CAAC,YAAgBS,EAASG,KAAKC,kBAjBjD,EAAKP,MAAQ,CACX,MAAU,GACV,YAAgB,GAJT,E,sEAuBT,OACA,6BACI,8CAAoBQ,KAAKR,MAAMC,MAA/B,OAA0CO,KAAKR,MAAMO,aACrD,wCACA,2BAAOE,SAAUD,KAAKhB,cAAekB,KAAK,SAE1C,4BAAQC,QAASH,KAAKX,aAAtB,e,GA9BUe,IAAMC,WCebC,MAZf,WACI,OACQ,kBAAC,IAAD,KAGI,kBAAC,IAAD,CAAOC,GAAG,WAAWC,UAAWzB,MCJhD0B,IAASC,OAAO,kBAAC,EAAD,MAAqCC,SAASC,eAAe,SH2HvE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.8e930f60.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport axios from 'axios'\nclass Weather extends React.Component{\n    constructor(){\n        super()\n        this.state = {\n          \"place\" : \"\",\n          \"temperature\" : 0\n        }\n    }\n\n    onPlaceChange = (event) =>{\n        this.setState({\n            \"place\" : event.target.value\n        })\n    }\n\n    handleClick = () => {\n        let url = \"http://localhost:8000/temperature\"\n        axios.post(url, {\"place\" : this.state.place})\n        .then((response)=>{\n            console.log(response.data.temperature)\n            this.setState({\"temperature\" : response.data.temperature})\n        })\n    }\n    render(){\n        return(\n        <div>\n            <h1>Temperature of {this.state.place} is {this.state.temperature}</h1>\n            <label>Place</label>\n            <input onChange={this.onPlaceChange} type=\"text\"></input>\n\n            <button onClick={this.handleClick}>Submit</button>\n        </div>\n        )\n    }\n}\n\nexport default Weather","import React from 'react'\r\nimport { BrowserRouter as Router , Route } from \"react-router-dom\";\r\n\r\nimport Weather from './Weather';\r\n\r\nfunction RouterComponent(){\r\n    return(\r\n            <Router>\r\n                \r\n\r\n                <Route to=\"/weather\" component={Weather}></Route>\r\n\r\n    \r\n            </Router>\r\n    )\r\n}\r\n\r\nexport default RouterComponent","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport RouterComponent from './RouterComponent'\n\nReactDOM.render(<RouterComponent></RouterComponent>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}